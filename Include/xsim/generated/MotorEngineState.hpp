// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "AngularForce.hpp"
#include "BatteryConsumptionData.hpp"
#include "CombustionEngineState.hpp"
#include "ElectricEngineState.hpp"
#include "EngineState.hpp"
#include "FuelConsumptionData.hpp"
#include "Power.hpp"
#include "Rpm.hpp"

namespace xsim
{
	struct MotorEngineState final
	{
		constexpr MotorEngineState() = default;
		constexpr MotorEngineState(const MotorEngineState&) = default;
		constexpr MotorEngineState(MotorEngineState&&) = default;
		~MotorEngineState() = default;
		constexpr MotorEngineState& operator=(const MotorEngineState&) = default;
		constexpr MotorEngineState& operator=(MotorEngineState&&) = default;

		::xsim::EngineState m_EngineState{};
		::xsim::Rpm m_Rpm{};
		float m_RpmNorm{};
		::xsim::AngularForce m_Torque{};
		::xsim::Power m_Power{};
		float m_Load{};
		::xsim::FuelConsumptionData m_FuelConsumption{};
		::xsim::BatteryConsumptionData m_BatteryConsumption{};
		::xsim::CombustionEngineState m_CombustionEngine{};
		::xsim::ElectricEngineState m_ElectricEngine{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::MotorEngineState>::value,
	"SDK bug: TypeStruct MotorEngineState not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::MotorEngineState, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::MotorEngineState& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("MotorEngineState"));
		}
	};
}
