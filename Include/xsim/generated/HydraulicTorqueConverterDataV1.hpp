// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "CurveDataV1.hpp"
#include "LockupClutchDataV1.hpp"

namespace xsim
{
	struct HydraulicTorqueConverterDataV1 final
	{
		constexpr HydraulicTorqueConverterDataV1() = default;
		constexpr HydraulicTorqueConverterDataV1(const HydraulicTorqueConverterDataV1&) = default;
		constexpr HydraulicTorqueConverterDataV1(HydraulicTorqueConverterDataV1&&) = default;
		~HydraulicTorqueConverterDataV1() = default;
		constexpr HydraulicTorqueConverterDataV1& operator=(const HydraulicTorqueConverterDataV1&) = default;
		constexpr HydraulicTorqueConverterDataV1& operator=(HydraulicTorqueConverterDataV1&&) = default;

		::xsim::CurveDataV1 m_SpeedRatioToTorqueRatio{};
		float m_CapacityScale{};
		::xsim::CurveDataV1 m_SpeedRatioToCapacityNormalized{};
		::xsim::LockupClutchDataV1 m_Lockup{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::HydraulicTorqueConverterDataV1>::value,
	"SDK bug: TypeStruct HydraulicTorqueConverterDataV1 not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::HydraulicTorqueConverterDataV1, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::HydraulicTorqueConverterDataV1& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("HydraulicTorqueConverterDataV1"));
		}
	};
}
