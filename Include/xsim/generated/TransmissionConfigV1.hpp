// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "AutoBoxDataV1.hpp"
#include "CouplerDataV1.hpp"
#include "DrivetrainDataV1.hpp"
#include "GearboxDataV1.hpp"
#include "RetarderDataV1.hpp"

namespace xsim
{
	struct TransmissionConfigV1 final
	{
		constexpr TransmissionConfigV1() = default;
		constexpr TransmissionConfigV1(const TransmissionConfigV1&) = default;
		constexpr TransmissionConfigV1(TransmissionConfigV1&&) = default;
		~TransmissionConfigV1() = default;
		constexpr TransmissionConfigV1& operator=(const TransmissionConfigV1&) = default;
		constexpr TransmissionConfigV1& operator=(TransmissionConfigV1&&) = default;

		::xsim::Entity m_VehicleEntity{};
		::xsim::GearboxDataV1 m_Gearbox{};
		::xsim::CouplerDataV1 m_Coupler{};
		::xsim::AutoBoxDataV1 m_AutoBox{};
		::xsim::RetarderDataV1 m_Retarder{};
		::xsim::DrivetrainDataV1 m_Drivetrain{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::TransmissionConfigV1>::value,
	"SDK bug: TypeStruct TransmissionConfigV1 not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::TransmissionConfigV1, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::TransmissionConfigV1& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("TransmissionConfigV1"));
		}
	};
}
