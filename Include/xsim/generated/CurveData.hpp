// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "InterpMethod.hpp"
#include "WrapMethod.hpp"

namespace xsim
{
	struct CurveData final
	{
		constexpr CurveData() = default;
		constexpr CurveData(const CurveData&) = default;
		constexpr CurveData(CurveData&&) = default;
		~CurveData() = default;
		constexpr CurveData& operator=(const CurveData&) = default;
		constexpr CurveData& operator=(CurveData&&) = default;

		float m_MinX{};
		float m_MaxX{};
		::xsim::WrapMethod m_MinWrap{};
		::xsim::WrapMethod m_MaxWrap{};
		uint8_t m_Samples{};
		::xsim::InterpMethod m_InterpMethod{};
		float m_InterpStepThreshold{};
		float m_InterpHermiteTension{};
		float m_InterpHermiteBias{};
		::xsim::Array<float, 32> m_Values{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::CurveData>::value,
	"SDK bug: TypeStruct CurveData not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::CurveData, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::CurveData& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("CurveData"));
		}
	};
}
