// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

namespace xsim
{
	enum class SurfaceType : int32_t
	{
		None = INT32_C(0),
		Asphalt = INT32_C(1),
		Concrete = INT32_C(2),
		Stones = INT32_C(3),
		DryGround = INT32_C(4),
		WetMud = INT32_C(5),
		Ice = INT32_C(6),
		Wood = INT32_C(7),
		Metal = INT32_C(8),
		Hedgehog = INT32_C(9),
		SandGravel = INT32_C(10),
		Flesh = INT32_C(11),
		Other = INT32_C(12)
	};
}

static_assert(
	std::is_standard_layout<::xsim::SurfaceType>::value,
	"SDK bug: TypeEnum SurfaceType not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::SurfaceType, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::SurfaceType& value, FormatContext& ctx)
		{
			switch (value)
			{
				case ::xsim::SurfaceType::None:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(None)"));
				}
				case ::xsim::SurfaceType::Asphalt:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Asphalt)"));
				}
				case ::xsim::SurfaceType::Concrete:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Concrete)"));
				}
				case ::xsim::SurfaceType::Stones:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Stones)"));
				}
				case ::xsim::SurfaceType::DryGround:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(DryGround)"));
				}
				case ::xsim::SurfaceType::WetMud:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(WetMud)"));
				}
				case ::xsim::SurfaceType::Ice:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Ice)"));
				}
				case ::xsim::SurfaceType::Wood:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Wood)"));
				}
				case ::xsim::SurfaceType::Metal:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Metal)"));
				}
				case ::xsim::SurfaceType::Hedgehog:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Hedgehog)"));
				}
				case ::xsim::SurfaceType::SandGravel:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(SandGravel)"));
				}
				case ::xsim::SurfaceType::Flesh:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Flesh)"));
				}
				case ::xsim::SurfaceType::Other:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType(Other)"));
				}
				default:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceType({})"), static_cast<uintmax_t>(value));
				}
			}
		}
	};
}
