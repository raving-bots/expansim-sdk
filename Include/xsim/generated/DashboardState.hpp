// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "BatteryConsumptionData.hpp"
#include "FuelConsumptionData.hpp"
#include "VehicleDoorStateArray.hpp"
#include "VehicleGearboxMode.hpp"
#include "VehicleHeadlampsMode.hpp"
#include "VehicleSignalMode.hpp"
#include "VehicleSystemState.hpp"

namespace xsim
{
	struct DashboardState final
	{
		constexpr DashboardState() = default;
		constexpr DashboardState(const DashboardState&) = default;
		constexpr DashboardState(DashboardState&&) = default;
		~DashboardState() = default;
		constexpr DashboardState& operator=(const DashboardState&) = default;
		constexpr DashboardState& operator=(DashboardState&&) = default;

		float m_Speed{};
		float m_SpeedSmoothed{};
		float m_SpeedSmoothVel{};
		float m_DistanceTraveled{};
		float m_Rpm{};
		float m_RpmSmoothed{};
		float m_RpmSmoothVel{};
		float m_Torque{};
		float m_Power{};
		float m_Load{};
		::xsim::VehicleGearboxMode m_GearboxMode{};
		int32_t m_TargetGear{};
		int32_t m_Gear{};
		::xsim::Boolean<uint8_t> m_MotorReverse{};
		::xsim::Boolean<uint8_t> m_NeutralPivot{};
		::xsim::Boolean<uint8_t> m_HandBrake{};
		int32_t m_Retarder{};
		float m_RetarderNorm{};
		::xsim::VehicleHeadlampsMode m_Headlamps{};
		::xsim::VehicleSignalMode m_SignalMode{};
		::xsim::Boolean<uint8_t> m_SignalInterrupt{};
		::xsim::Boolean<uint8_t> m_DriveFront{};
		::xsim::Boolean<uint8_t> m_DriveRear{};
		::xsim::Boolean<uint8_t> m_DiffLockFront{};
		::xsim::Boolean<uint8_t> m_DiffLockInter{};
		::xsim::Boolean<uint8_t> m_DiffLockRear{};
		float m_FuelTankReserve{};
		float m_FuelTankReserveNorm{};
		::xsim::FuelConsumptionData m_FuelConsumption{};
		::xsim::FuelConsumptionData m_FuelConsumptionSmoothed{};
		::xsim::FuelConsumptionData m_FuelConsumptionSmoothVel{};
		float m_FuelLongDuration{};
		float m_BatteryReserveKwh{};
		float m_BatteryReserveNorm{};
		::xsim::BatteryConsumptionData m_BatteryConsumption{};
		::xsim::BatteryConsumptionData m_BatteryConsumptionSmoothed{};
		::xsim::BatteryConsumptionData m_BatteryConsumptionSmoothVel{};
		float m_BatteryLongDuration{};
		::xsim::VehicleSystemState m_SystemAbaState{};
		::xsim::VehicleSystemState m_SystemAbsState{};
		::xsim::VehicleSystemState m_SystemAsrState{};
		::xsim::VehicleSystemState m_SystemEscState{};
		::xsim::VehicleDoorStateArray m_Doors{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::DashboardState>::value,
	"SDK bug: TypeStruct DashboardState not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::DashboardState, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::DashboardState& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("DashboardState"));
		}
	};
}
