// Copyright Raving Bots 2018-2021
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

namespace xsim
{
	enum class SurfaceTypeV1 : int32_t
	{
		None = INT32_C(0),
		Asphalt = INT32_C(1),
		Concrete = INT32_C(2),
		Stones = INT32_C(3),
		DryGround = INT32_C(4),
		WetMud = INT32_C(5),
		Ice = INT32_C(6),
		Wood = INT32_C(7),
		Metal = INT32_C(8),
		Hedgehog = INT32_C(9),
		SandGravel = INT32_C(10),
		Flesh = INT32_C(11),
		Other = INT32_C(12)
	};
}

static_assert(
	std::is_standard_layout<::xsim::SurfaceTypeV1>::value,
	"SDK bug: TypeEnum SurfaceTypeV1 not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::SurfaceTypeV1, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::SurfaceTypeV1& value, FormatContext& ctx)
		{
			switch (value)
			{
				case ::xsim::SurfaceTypeV1::None:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(None)"));
				}
				case ::xsim::SurfaceTypeV1::Asphalt:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Asphalt)"));
				}
				case ::xsim::SurfaceTypeV1::Concrete:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Concrete)"));
				}
				case ::xsim::SurfaceTypeV1::Stones:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Stones)"));
				}
				case ::xsim::SurfaceTypeV1::DryGround:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(DryGround)"));
				}
				case ::xsim::SurfaceTypeV1::WetMud:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(WetMud)"));
				}
				case ::xsim::SurfaceTypeV1::Ice:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Ice)"));
				}
				case ::xsim::SurfaceTypeV1::Wood:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Wood)"));
				}
				case ::xsim::SurfaceTypeV1::Metal:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Metal)"));
				}
				case ::xsim::SurfaceTypeV1::Hedgehog:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Hedgehog)"));
				}
				case ::xsim::SurfaceTypeV1::SandGravel:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(SandGravel)"));
				}
				case ::xsim::SurfaceTypeV1::Flesh:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Flesh)"));
				}
				case ::xsim::SurfaceTypeV1::Other:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1(Other)"));
				}
				default:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("SurfaceTypeV1({})"), static_cast<uintmax_t>(value));
				}
			}
		}
	};
}
