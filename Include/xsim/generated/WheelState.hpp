// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "ContactForceCommand.hpp"
#include "ContactForces.hpp"
#include "ContactLoad.hpp"
#include "SatForce.hpp"
#include "ShapeContact.hpp"
#include "SystemAbsState.hpp"
#include "SystemAsrState.hpp"
#include "WheelShapeState.hpp"
#include "WheelTransformState.hpp"
#include "WheelTurnState.hpp"

namespace xsim
{
	struct WheelState final
	{
		constexpr WheelState() = default;
		constexpr WheelState(const WheelState&) = default;
		constexpr WheelState(WheelState&&) = default;
		~WheelState() = default;
		constexpr WheelState& operator=(const WheelState&) = default;
		constexpr WheelState& operator=(WheelState&&) = default;

		::xsim::WheelTurnState m_Turn{};
		::xsim::WheelTransformState m_Transform{};
		::xsim::WheelShapeState m_Shape{};
		::xsim::ShapeContact m_Contact{};
		::xsim::ContactLoad m_Load{};
		::xsim::ContactForces m_Forces{};
		::xsim::SatForce m_Sat{};
		::xsim::ContactForceCommand m_ForceCommand{};
		::xsim::SystemAbsState m_SystemAbs{};
		::xsim::SystemAsrState m_SystemAsr{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::WheelState>::value,
	"SDK bug: TypeStruct WheelState not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::WheelState, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::WheelState& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("WheelState"));
		}
	};
}
