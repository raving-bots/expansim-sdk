// Copyright Raving Bots 2018-2021
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "AxisIndexV1.hpp"
#include "DriveIndexV1.hpp"
#include "WheelIndexV1.hpp"

namespace xsim
{
	struct ManifoldIndexV1 final
	{
		constexpr ManifoldIndexV1() = default;
		constexpr ManifoldIndexV1(const ManifoldIndexV1&) = default;
		constexpr ManifoldIndexV1(ManifoldIndexV1&&) = default;
		~ManifoldIndexV1() = default;
		constexpr ManifoldIndexV1& operator=(const ManifoldIndexV1&) = default;
		constexpr ManifoldIndexV1& operator=(ManifoldIndexV1&&) = default;

		::xsim::DriveIndexV1 m_DriveIndex{};
		::xsim::AxisIndexV1 m_AxisIndex{};
		::xsim::WheelIndexV1 m_WheelIndex{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::ManifoldIndexV1>::value,
	"SDK bug: TypeStruct ManifoldIndexV1 not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::ManifoldIndexV1, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::ManifoldIndexV1& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("ManifoldIndexV1"));
		}
	};
}
