// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "AngleDeg.hpp"
#include "CurveData.hpp"
#include "Length.hpp"
#include "Mass.hpp"
#include "SurfaceFrictionBonus.hpp"

namespace xsim
{
	struct CatPlateData final
	{
		constexpr CatPlateData() = default;
		constexpr CatPlateData(const CatPlateData&) = default;
		constexpr CatPlateData(CatPlateData&&) = default;
		~CatPlateData() = default;
		constexpr CatPlateData& operator=(const CatPlateData&) = default;
		constexpr CatPlateData& operator=(CatPlateData&&) = default;

		::xsim::Mass m_Mass{};
		::xsim::Length m_Width{};
		int32_t m_VariantId{};
		int32_t m_Count{};
		float m_Friction{};
		::xsim::SurfaceFrictionBonus m_FrictionBonus{};
		::xsim::CurveData m_VelocityToRollingResistance{};
		::xsim::CurveData m_LongForceNorm{};
		::xsim::CurveData m_LatForceNorm{};
		::xsim::AngleDeg m_PeakSlipAngle{};
		::xsim::Vector2F m_PeakSlipRatioRange{};
		float m_ContactTolerance{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::CatPlateData>::value,
	"SDK bug: TypeStruct CatPlateData not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::CatPlateData, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::CatPlateData& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("CatPlateData"));
		}
	};
}
