// Copyright Raving Bots 2018-2021
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "AutoBoxDriveModeV1.hpp"
#include "AutoShiftCondV1.hpp"

namespace xsim
{
	struct AutoBoxStateV1 final
	{
		constexpr AutoBoxStateV1() = default;
		constexpr AutoBoxStateV1(const AutoBoxStateV1&) = default;
		constexpr AutoBoxStateV1(AutoBoxStateV1&&) = default;
		~AutoBoxStateV1() = default;
		constexpr AutoBoxStateV1& operator=(const AutoBoxStateV1&) = default;
		constexpr AutoBoxStateV1& operator=(AutoBoxStateV1&&) = default;

		::xsim::AutoBoxDriveModeV1 m_DriveMode{};
		::xsim::Boolean<uint8_t> m_SemiAuto{};
		int32_t m_DeltaGear{};
		float m_ShiftRegress{};
		::xsim::AutoShiftCondV1 m_ShiftUp{};
		::xsim::AutoShiftCondV1 m_ShiftDown{};
		float m_Cooldown{};
		float m_CvtProgress{};
		float m_CvtProgressVel{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::AutoBoxStateV1>::value,
	"SDK bug: TypeStruct AutoBoxStateV1 not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::AutoBoxStateV1, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::AutoBoxStateV1& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("AutoBoxStateV1"));
		}
	};
}
