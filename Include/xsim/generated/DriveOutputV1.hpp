// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "AxisOutputV1.hpp"
#include "DriveTypeV1.hpp"
#include "InOutFeedbackV1.hpp"

namespace xsim
{
	struct DriveOutputV1 final
	{
		constexpr DriveOutputV1() = default;
		constexpr DriveOutputV1(const DriveOutputV1&) = default;
		constexpr DriveOutputV1(DriveOutputV1&&) = default;
		~DriveOutputV1() = default;
		constexpr DriveOutputV1& operator=(const DriveOutputV1&) = default;
		constexpr DriveOutputV1& operator=(DriveOutputV1&&) = default;

		::xsim::DriveTypeV1 m_Type{};
		::xsim::Boolean<uint8_t> m_Drive{};
		::xsim::Boolean<uint8_t> m_Lock{};
		int32_t m_AxisCount{};
		::xsim::AxisOutputV1 m_AxisOutput0{};
		::xsim::AxisOutputV1 m_AxisOutput1{};
		::xsim::AxisOutputV1 m_AxisOutput2{};
		::xsim::AxisOutputV1 m_AxisOutput3{};
		::xsim::InOutFeedbackV1 m_FeedbackState{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::DriveOutputV1>::value,
	"SDK bug: TypeStruct DriveOutputV1 not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::DriveOutputV1, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::DriveOutputV1& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("DriveOutputV1"));
		}
	};
}
