// Copyright Raving Bots 2018-2021
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

namespace xsim
{
	enum class AutoBoxType : int32_t
	{
		FullOrSemi = INT32_C(0),
		FullOnly = INT32_C(1),
		SemiOnly = INT32_C(2)
	};
}

static_assert(
	std::is_standard_layout<::xsim::AutoBoxType>::value,
	"SDK bug: TypeEnum AutoBoxType not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::AutoBoxType, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::AutoBoxType& value, FormatContext& ctx)
		{
			switch (value)
			{
				case ::xsim::AutoBoxType::FullOrSemi:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("AutoBoxType(FullOrSemi)"));
				}
				case ::xsim::AutoBoxType::FullOnly:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("AutoBoxType(FullOnly)"));
				}
				case ::xsim::AutoBoxType::SemiOnly:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("AutoBoxType(SemiOnly)"));
				}
				default:
				{
					return format_to(ctx.out(), XSIM_FMT_LITERAL("AutoBoxType({})"), static_cast<uintmax_t>(value));
				}
			}
		}
	};
}
