// Copyright Raving Bots 2018-2021
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "PneumaticDoorState.hpp"

namespace xsim
{
	struct PneumaticDoorStateArray final
	{
		constexpr PneumaticDoorStateArray() = default;
		constexpr PneumaticDoorStateArray(const PneumaticDoorStateArray&) = default;
		constexpr PneumaticDoorStateArray(PneumaticDoorStateArray&&) = default;
		~PneumaticDoorStateArray() = default;
		constexpr PneumaticDoorStateArray& operator=(const PneumaticDoorStateArray&) = default;
		constexpr PneumaticDoorStateArray& operator=(PneumaticDoorStateArray&&) = default;

		int32_t m_Count{};
		::xsim::PneumaticDoorState m_State0{};
		::xsim::PneumaticDoorState m_State1{};
		::xsim::PneumaticDoorState m_State2{};
		::xsim::PneumaticDoorState m_State3{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::PneumaticDoorStateArray>::value,
	"SDK bug: TypeStruct PneumaticDoorStateArray not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::PneumaticDoorStateArray, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::PneumaticDoorStateArray& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("PneumaticDoorStateArray"));
		}
	};
}
