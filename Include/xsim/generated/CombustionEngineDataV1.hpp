// Copyright Raving Bots 2018-2021
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "AngularForceV1.hpp"
#include "CurveDataV1.hpp"
#include "EngineStarterDataV1.hpp"
#include "InertiaV1.hpp"
#include "PowerV1.hpp"
#include "RpmV1.hpp"
#include "ThrottleControlDataV1.hpp"

namespace xsim
{
	struct CombustionEngineDataV1 final
	{
		constexpr CombustionEngineDataV1() = default;
		constexpr CombustionEngineDataV1(const CombustionEngineDataV1&) = default;
		constexpr CombustionEngineDataV1(CombustionEngineDataV1&&) = default;
		~CombustionEngineDataV1() = default;
		constexpr CombustionEngineDataV1& operator=(const CombustionEngineDataV1&) = default;
		constexpr CombustionEngineDataV1& operator=(CombustionEngineDataV1&&) = default;

		::xsim::InertiaV1 m_Inertia{};
		::xsim::RpmV1 m_StallRpm{};
		::xsim::RpmV1 m_MinRpm{};
		::xsim::RpmV1 m_MaxRpm{};
		::xsim::CurveDataV1 m_RpmToMotorTorque{};
		::xsim::CurveDataV1 m_RpmToBrakeTorque{};
		::xsim::CurveDataV1 m_RpmToFuelConsumptionGpKwh{};
		::xsim::ThrottleControlDataV1 m_ThrottleControl{};
		::xsim::EngineStarterDataV1 m_Starter{};
		::xsim::AngularForceV1 m_PrecomputedMaxTorque{};
		::xsim::RpmV1 m_PrecomputedMaxTorqueRpm{};
		float m_PrecomputedMaxTorqueRpmNorm{};
		::xsim::PowerV1 m_PrecomputedMaxPower{};
		::xsim::RpmV1 m_PrecomputedMaxPowerRpm{};
		float m_PrecomputedMaxPowerRpmNorm{};
		float m_PrecomputedMaxFuelConsumptionGpKwh{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::CombustionEngineDataV1>::value,
	"SDK bug: TypeStruct CombustionEngineDataV1 not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::CombustionEngineDataV1, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::CombustionEngineDataV1& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("CombustionEngineDataV1"));
		}
	};
}
