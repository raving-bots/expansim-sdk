// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "PIDV1.hpp"

namespace xsim
{
	struct ElectricEngineStateV1 final
	{
		constexpr ElectricEngineStateV1() = default;
		constexpr ElectricEngineStateV1(const ElectricEngineStateV1&) = default;
		constexpr ElectricEngineStateV1(ElectricEngineStateV1&&) = default;
		~ElectricEngineStateV1() = default;
		constexpr ElectricEngineStateV1& operator=(const ElectricEngineStateV1&) = default;
		constexpr ElectricEngineStateV1& operator=(ElectricEngineStateV1&&) = default;

		::xsim::PIDV1 m_ControllerPid{};
		::xsim::Boolean<uint8_t> m_Reverse{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::ElectricEngineStateV1>::value,
	"SDK bug: TypeStruct ElectricEngineStateV1 not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::ElectricEngineStateV1, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::ElectricEngineStateV1& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("ElectricEngineStateV1"));
		}
	};
}
