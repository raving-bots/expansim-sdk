// Copyright Raving Bots 2018-2021
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

namespace xsim
{
	struct CameraState final
	{
		constexpr CameraState() = default;
		constexpr CameraState(const CameraState&) = default;
		constexpr CameraState(CameraState&&) = default;
		~CameraState() = default;
		constexpr CameraState& operator=(const CameraState&) = default;
		constexpr CameraState& operator=(CameraState&&) = default;

		::xsim::Boolean<uint8_t> m_Calculated{};
		::xsim::Vector3F m_InsideFloorPosition{};
		::xsim::Vector3F m_InsideCockpitPosition{};
		::xsim::Vector3F m_InsideChallengePosition{};
		::xsim::Vector3F m_InsideHeadPosition{};
		::xsim::Quaternion m_InsideFloorRotation{};
		::xsim::Quaternion m_InsideCockpitRotation{};
		::xsim::Quaternion m_InsideChallengeRotation{};
		::xsim::Quaternion m_InsideHeadRotation{};
		::xsim::Vector3F m_InsideLinearVelocity{};
		::xsim::Vector3F m_InsideAngularVelocity{};
		::xsim::Vector3F m_InsideLinearAcceleration{};
		::xsim::Vector3F m_InsideAngularAcceleration{};
		::xsim::Vector3F m_OutsidePosition{};
		::xsim::Quaternion m_OutsideRotation{};
		::xsim::Vector3F m_OutsideLinearVelocity{};
		::xsim::Vector3F m_OutsideAngularVelocity{};
		::xsim::Vector3F m_OutsideLinearAcceleration{};
		::xsim::Vector3F m_OutsideAngularAcceleration{};
		::xsim::Vector3F m_TopSidePosition{};
		::xsim::Quaternion m_TopSideRotation{};
		::xsim::Vector3F m_LeftSidePosition{};
		::xsim::Quaternion m_LeftSideRotation{};
		::xsim::Vector3F m_RightSidePosition{};
		::xsim::Quaternion m_RightSideRotation{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::CameraState>::value,
	"SDK bug: TypeStruct CameraState not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::CameraState, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::CameraState& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("CameraState"));
		}
	};
}
