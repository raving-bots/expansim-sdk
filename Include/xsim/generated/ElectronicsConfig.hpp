// Copyright Raving Bots 2018-2021
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "SpeedLimiterConfig.hpp"
#include "SystemAbaConfig.hpp"
#include "SystemAbsConfig.hpp"
#include "SystemAsrConfig.hpp"
#include "SystemEscConfig.hpp"

namespace xsim
{
	struct ElectronicsConfig final
	{
		constexpr ElectronicsConfig() = default;
		constexpr ElectronicsConfig(const ElectronicsConfig&) = default;
		constexpr ElectronicsConfig(ElectronicsConfig&&) = default;
		~ElectronicsConfig() = default;
		constexpr ElectronicsConfig& operator=(const ElectronicsConfig&) = default;
		constexpr ElectronicsConfig& operator=(ElectronicsConfig&&) = default;

		::xsim::Entity m_VehicleEntity{};
		::xsim::SystemAbaConfig m_SystemAba{};
		::xsim::SystemAbsConfig m_SystemAbs{};
		::xsim::SystemAsrConfig m_SystemAsr{};
		::xsim::SystemEscConfig m_SystemEsc{};
		::xsim::SpeedLimiterConfig m_SpeedLimiter{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::ElectronicsConfig>::value,
	"SDK bug: TypeStruct ElectronicsConfig not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::ElectronicsConfig, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::ElectronicsConfig& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("ElectronicsConfig"));
		}
	};
}
