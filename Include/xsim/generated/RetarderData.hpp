// Copyright Raving Bots 2018-2020
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file SDK-LICENSE or copy at https://www.boost.org/LICENSE_1_0.txt)

// <auto-generated>
//     WARNING: This file has been generated automatically. Do not edit manually, changes will be lost.
// </auto-generated>

#pragma once

#include <xsim/types.hpp>

#include "AngularForce.hpp"
#include "CurveData.hpp"
#include "RetarderType.hpp"

namespace xsim
{
	struct RetarderData final
	{
		constexpr RetarderData() = default;
		constexpr RetarderData(const RetarderData&) = default;
		constexpr RetarderData(RetarderData&&) = default;
		~RetarderData() = default;
		constexpr RetarderData& operator=(const RetarderData&) = default;
		constexpr RetarderData& operator=(RetarderData&&) = default;

		::xsim::RetarderType m_Type{};
		int32_t m_LevelCount{};
		float m_LevelDuration{};
		float m_MaxThrottleInput{};
		::xsim::AngularForce m_MaxBrakeTorque{};
		::xsim::CurveData m_RpmToTorqueNormalized{};
	};
}

static_assert(
	std::is_standard_layout<::xsim::RetarderData>::value,
	"SDK bug: TypeStruct RetarderData not standard layout"
);

namespace fmt
{
	template <typename Char>
	struct formatter<::xsim::RetarderData, Char>
	{
		template <typename ParseContext>
		constexpr auto parse(ParseContext& ctx)
		{
			return ctx.begin();
		}

		template <typename FormatContext>
		auto format(const ::xsim::RetarderData& value, FormatContext& ctx)
		{
			return format_to(ctx.out(), XSIM_FMT_LITERAL("RetarderData"));
		}
	};
}
